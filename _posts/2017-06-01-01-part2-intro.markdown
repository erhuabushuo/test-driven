---
title: 介绍
layout: post
date: 2017-06-01 23:59:59
permalink: part-two-intro
part: 2
share: true
---

在第二部分，我们会将项目拆成三个独立项目。我也会增加“代码覆盖率(code coverage"和"持续结成（continuous integration)"来确保每个服务可独立运行，并且可以独立测试。最终，我们将在前端使用*ReactJS*。


#### 结构

1. *flask-microservices-main* - Docker Compose files, Nginx, admin scripts
1. *flask-microservices-users* - Flask app
1. *flask-microservices-client* - client-side

#### 目标

在这个部分后，你将……

1. 从单个Docker Compose文件管理多个不同git仓库里的服务
1. 使用git仓库来做Docker Compose 构建上下文
1. 单元测试集成测试覆盖率
1. 不通过Docker每个服务独立工作
1. 配置Travis CI实现持续集成测试
1. 解释React是什么
1. 容器里使用React
1. 使用React组件构建单页面应用
1. 使用React属性和状态
1. 通过组件生存周期方法来管理React组件状态
1. 构建时传递环境变量
1. 使用React处理表单提交

#### App

<div style="text-align:left;">
  <img src="/assets/img/testdriven-architecture.png" style="max-width: 100%; border:0; box-shadow: none;" alt="microservice architecture">
</div>

查看托管在EC2的在线DEMO  - [http://54.89.0.180/](http://54.89.0.180/)

你也可以通过如下endpoints进行测试……

| Endpoint    | HTTP Method | CRUD Method | Result          |
|-------------|-------------|-------------|-----------------|
| /users      | GET         | READ        | get all users   |
| /users/:id  | GET         | READ        | get single user |
| /users      | POST        | CREATE      | add a user      |

> `/users` POST endpoint 将在 Part 3 实现.

获取代码：

1. [flask-microservices-main](https://github.com/realpython/flask-microservices-main/releases/tag/part2)
1. [flask-microservices-users](https://github.com/realpython/flask-microservices-users/releases/tag/part2)
1. [flask-microservices-client](https://github.com/realpython/flask-microservices-client/releases/tag/part2)
