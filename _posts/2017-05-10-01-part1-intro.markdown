---
title: 介绍
layout: post
date: 2017-05-10 23:59:59
permalink: part-one-intro
part: 1
share: true
---
通过学习本教程，你将学习如何快速使用*Python*，*Postgres*，以及*Flask*Web框架在*Docker*中构建一个*RESTful API*开发环境。在学习完如何在本地实现后，我们将学习部署到*Amazon EC2*实例中。

> 我们将通过测试驱动开发模式(TDD)过程来实现，在实现前我们先会编写单元测试。

<div style="text-align:left;">
  <img src="/assets/img/flask-tdd-logo.png" style="max-width: 100%; border:0; box-shadow: none;" alt="flask tdd logo">
</div>

本系列使用如下工具和技术：

**Part 1**

1. Python v3.6.1
1. Flask v0.12.2
1. Flask-Script v2.0.5
1. Flask-SQLAlchemy v2.2
1. Flask-Testing v0.6.2
1. Gunicorn v19.7.1
1. Nginx v1.13.0
1. Docker v17.03.1-ce
1. Docker Compose v1.11.2
1. Docker Machine v0.10.0

**Part 2**

1. Coverage.py v4.4.1
1. Node v7.10.0
1. NPM v4.2.0
1. Create React App v1.3.0
1. Axios v0.16.2
1. Flask-CORS v3.0.2

**Part 3**

1. Flask-Migrate v2.0.4
1. Flask-Bcrypt v0.7.1
1. PyJWT v1.5.0
1. react-router-dom v4.1.1
1. React Bootstrap v0.31.0
1. React Router Bootstrap v0.24.2

**Part 4**

1. TestCafe v0.16.1
1. node-randomstring v1.1.5
1. Swagger UI v3.0.8

Before b在开始前，你应该熟悉以下主题，参考如下获取更多信息：

| Topic            | Resource |
|------------------|----------|
| Docker           | [Get started with Docker](https://docs.docker.com/engine/getstarted/) |
| Docker Compose   | [Get started with Docker Compose](https://docs.docker.com/compose/gettingstarted/) |
| Docker Machine | [Docker Machine Overview](https://docs.docker.com/machine/overview/) |
| Flask | [Real Python](https://realpython.com)

#### 目标

在本章之后，你应该可以……

1. 使用Flask开发RESTful API
1. 测试驱动开发实践
1. 在本地配置Docker，Docker Compose和Docker Machine并执行服务
1. 使用volumes挂载代码到容器里
1. 在Docker容器里执行单元测试和集成测试
1. 服务在不同容器间相互通信
1. Python和Flask在容器中执行
1. 在Amazon EC2实例安装Flask, Nginx和Gunicorn

#### App

查看运行在EC2的Demo示例 - [http://54.89.0.180/](http://54.89.0.180/)

你也可以测试如下地址：

| Endpoint    | HTTP Method | CRUD Method | Result          |
|-------------|-------------|-------------|-----------------|
| /users      | GET         | READ        | get all users   |
| /users/:id  | GET         | READ        | get single user |
| /users      | POST        | CREATE      | add a user      |

该应用运行在三个容器 - Flask，Postgres和Nginx。在第一部分末，你将完成该应用并且部署。我们会在接下部分添加验证和其他服务。

#### Code

从仓库 [flask-microservices-users](https://github.com/realpython/flask-microservices-users/releases/tag/part1) 获取代码。
